// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/* global document */
import { _deepEqual, _applyStyles, _removeStyles } from '@deck.gl/core';
export class WidgetImpl {
    constructor(props) {
        this.id = props.id || 'widget';
        this.props = props;
    }
    onAdd({ deck }) {
        this.deck = deck;
        const { style, className } = this.props;
        const el = this._createRootElement({
            widgetClassName: this.className,
            className,
            style
        });
        this.element = el;
        this.onRenderHTML();
        return this.element;
    }
    onRemove() {
        this.deck = undefined;
        this.element = undefined;
    }
    setProps(props) {
        const oldProps = this.props;
        const el = this.element;
        if (el) {
            if (oldProps.className !== props.className) {
                if (oldProps.className)
                    el.classList.remove(oldProps.className);
                if (props.className)
                    el.classList.add(props.className);
            }
            if (!_deepEqual(oldProps.style, props.style, 1)) {
                _removeStyles(el, oldProps.style);
                _applyStyles(el, props.style);
            }
        }
        Object.assign(this.props, props);
        this.onRenderHTML();
    }
    _createRootElement(props) {
        const { widgetClassName, className, style } = props;
        const element = document.createElement('div');
        ['deck-widget', widgetClassName, className]
            .filter((cls) => typeof cls === 'string' && cls.length > 0)
            .forEach(className => element.classList.add(className));
        _applyStyles(element, style);
        return element;
    }
}
WidgetImpl.defaultProps = {
    id: 'widget',
    style: {},
    className: ''
};
//# sourceMappingURL=widget-impl.js.map