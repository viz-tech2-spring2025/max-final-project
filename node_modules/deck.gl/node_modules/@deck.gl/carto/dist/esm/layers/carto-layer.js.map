{"version":3,"sources":["../../../src/layers/carto-layer.ts"],"names":["CompositeLayer","log","CartoTileLayer","H3TileLayer","QuadbinTileLayer","MVTLayer","fetchLayerData","getDataV2","API_VERSIONS","COLUMNS_SUPPORT","FORMATS","GEO_COLUMN_SUPPORT","MAP_TYPES","TILE_FORMATS","getDefaultCredentials","assert","defaultProps","data","type","onDataLoad","value","compare","onDataError","optional","uniqueIdProperty","credentials","connection","format","formatTiles","clientId","geoColumn","columns","aggregationExp","aggregationResLevel","CartoLayer","initializeState","state","apiVersion","isLoaded","getSubLayers","length","_checkProps","props","localCreds","Object","values","includes","V1","V2","QUERY","TILESET","V3","join","Array","isArray","updateState","oldProps","changeFlags","shouldUpdateData","dataChanged","JSON","stringify","setState","_updateData","source","rest","localConfig","result","TILEJSON","propName","layer","err","_getSubLayerAndProps","_notUsed","propsNoData","tileUrl","URL","tiles","searchParams","get","MVT","scheme","renderLayers","updateTriggers","getSubLayerProps","id","layerName"],"mappings":"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","sourcesContent":["import {\n  CompositeLayer,\n  Layer,\n  log,\n  CompositeLayerProps,\n  LayerProps,\n  ChangeFlags\n} from '@deck.gl/core';\nimport CartoTileLayer from './carto-tile-layer';\nimport H3TileLayer from './h3-tile-layer';\nimport QuadbinTileLayer from './quadbin-tile-layer';\nimport {MVTLayer} from '@deck.gl/geo-layers';\nimport {fetchLayerData, getDataV2, API_VERSIONS} from '../api';\nimport {\n  COLUMNS_SUPPORT,\n  FORMATS,\n  GEO_COLUMN_SUPPORT,\n  MapType,\n  MAP_TYPES,\n  TileFormat,\n  TILE_FORMATS\n} from '../api/maps-api-common';\nimport {\n  ClassicCredentials,\n  CloudNativeCredentials,\n  Credentials,\n  getDefaultCredentials\n} from '../config';\nimport {FetchLayerDataResult} from '../api/maps-v3-client';\nimport {assert} from '../utils';\n\nconst defaultProps = {\n  // (String, required): data resource to load. table name, sql query or tileset name.\n  data: null,\n  // (Enum (MAP_TYPES), required)\n  type: null,\n  onDataLoad: {type: 'function', value: data => {}, compare: false},\n  onDataError: {type: 'function', value: null, compare: false, optional: true},\n  uniqueIdProperty: 'cartodb_id',\n\n  // override carto credentials for the layer, set to null to read from default\n  credentials: null,\n\n  /*********************/\n  /* API v3 PARAMETERS */\n  /**********************/\n  // (String, required): connection name at CARTO platform\n  connection: null,\n\n  // (String, optional): format of data\n  format: null,\n\n  // (String, optional): force format of data for tiles\n  formatTiles: null,\n\n  // (String, optional): clientId identifier used for internal tracing, place here a string to identify the client who is doing the request.\n  clientId: null,\n\n  // (String, optional): name of the `geo_column` in the CARTO platform. Use this override the default column ('geom'), from which the geometry information should be fetched.\n  geoColumn: null,\n\n  // (Array<String>, optional): names of columns to fetch. By default, all columns are fetched.\n  columns: {type: 'array', value: null},\n\n  // (String, optional): aggregation SQL expression. Only used for spatial index datasets\n  aggregationExp: null,\n\n  // (Number, optional): aggregation resolution level. Only used for spatial index datasets, defaults to 6 for quadbins, 4 for h3\n  aggregationResLevel: null\n};\n\n/** All properties supported by CartoLayer. */\nexport type CartoLayerProps<DataT = any> = _CartoLayerProps & CompositeLayerProps<DataT>;\n\n/** Properties added by CartoLayer. */\ntype _CartoLayerProps = {\n  /**\n   * Either a SQL query or a name of dataset/tileset.\n   */\n  data: string;\n\n  /**\n   * Data type.\n   *\n   * Possible values are:\n   *  * `MAP_TYPES.QUERY`, if data is a SQL query.\n   *  * `MAP_TYPES.TILESET`, if data is a tileset name.\n   *  * `MAP_TYPES.TABLE`, if data is a dataset name. Only supported with API v3.\n   */\n  type: MapType;\n\n  /**\n   * Name of the connection registered in the CARTO workspace.\n   *\n   * Required when apiVersion is `API_VERSIONS.V3`.\n   */\n  connection?: string;\n\n  /**\n   * Use to override the default tile data format.\n   *\n   * Only supported when apiVersion is `API_VERSIONS.V3`.\n   *\n   * Possible values are: `TILE_FORMATS.BINARY`, `TILE_FORMATS.GEOJSON` and `TILE_FORMATS.MVT`.\n   */\n  formatTiles?: TileFormat;\n\n  /**\n   * Name of the geo_column in the CARTO platform.\n   *\n   * Use this override the default column (`'geom'`), from which the geometry information should be fetched.\n   *\n   * Only supported when apiVersion is `API_VERSIONS.V3` and type is `MAP_TYPES.TABLE`.\n   */\n  geoColumn?: string;\n\n  /**\n   * Names of columns to fetch.\n   *\n   * By default, all columns are fetched\n   *\n   * Only supported when apiVersion is `API_VERSIONS.V3` and type is `MAP_TYPES.TABLE`.\n   */\n  columns?: string[];\n\n  /**\n   * A string pointing to a unique attribute at the result of the query.\n   *\n   * A unique attribute is needed for highlighting with vector tiles when a feature is split across two or more tiles.\n   */\n  uniqueIdProperty?: string;\n\n  /**\n   * Optional. Overrides the configuration to connect with CARTO.\n   *\n   * @see Credentials\n   */\n  credentials?: Credentials;\n\n  /**\n   * Called when the request to the CARTO Maps API failed.\n   *\n   * By default the Error is thrown.\n   */\n  onDataError?: (err: unknown) => void;\n\n  clientId?: string;\n\n  /** Aggregation SQL expression. Only used for spatial index datasets **/\n  aggregationExp?: string;\n\n  /** Aggregation resolution level. Only used for spatial index datasets, defaults to 6 for quadbins, 4 for h3. **/\n  aggregationResLevel?: number;\n};\n\nexport default class CartoLayer<ExtraProps = {}> extends CompositeLayer<\n  Required<_CartoLayerProps> & ExtraProps\n> {\n  static layerName = 'CartoLayer';\n  static defaultProps = defaultProps as any;\n\n  initializeState(): void {\n    this.state = {\n      data: null,\n      apiVersion: null\n    };\n  }\n\n  get isLoaded(): boolean {\n    return this.getSubLayers().length > 0 && super.isLoaded;\n  }\n\n  _checkProps(props: CartoLayerProps): void {\n    const {type, credentials, connection, geoColumn, columns} = props;\n    const localCreds = {...getDefaultCredentials(), ...credentials};\n    const {apiVersion} = localCreds;\n\n    log.assert(\n      Object.values(API_VERSIONS).includes(apiVersion),\n      `Invalid apiVersion ${apiVersion}. Use API_VERSIONS enum.`\n    );\n\n    if (apiVersion === API_VERSIONS.V1 || apiVersion === API_VERSIONS.V2) {\n      log.assert(\n        type === MAP_TYPES.QUERY || type === MAP_TYPES.TILESET,\n        `Invalid type ${type}. Use type MAP_TYPES.QUERY or MAP_TYPES.TILESET for apiVersion ${apiVersion}`\n      );\n      log.assert(!connection, `Connection prop is not supported for apiVersion ${apiVersion}`);\n      log.assert(!geoColumn, `geoColumn prop is not supported for apiVersion ${apiVersion}`);\n      log.assert(!columns, `columns prop is not supported for apiVersion ${apiVersion}`);\n    } else if (apiVersion === API_VERSIONS.V3) {\n      log.assert(connection, 'Missing mandatory connection parameter');\n      log.assert(\n        Object.values(MAP_TYPES).includes(type),\n        `Invalid type ${type}. Use MAP_TYPES enum.`\n      );\n      if (!COLUMNS_SUPPORT.includes(type)) {\n        log.assert(!columns, `columns prop is only supported for types: ${COLUMNS_SUPPORT.join()}`);\n      }\n      if (!GEO_COLUMN_SUPPORT.includes(type)) {\n        log.assert(\n          !geoColumn,\n          `geoColumn prop is only supported for types: ${GEO_COLUMN_SUPPORT.join()}`\n        );\n      }\n      if (columns) {\n        log.assert(Array.isArray(columns), 'columns prop must be an Array');\n      }\n    }\n  }\n\n  updateState({\n    props,\n    oldProps,\n    changeFlags\n  }: {\n    props: CartoLayerProps;\n    oldProps: CartoLayerProps;\n    context: any;\n    changeFlags: ChangeFlags;\n  }): void {\n    this._checkProps(props);\n    const shouldUpdateData =\n      changeFlags.dataChanged ||\n      props.aggregationExp !== oldProps.aggregationExp ||\n      props.aggregationResLevel !== oldProps.aggregationResLevel ||\n      props.connection !== oldProps.connection ||\n      props.geoColumn !== oldProps.geoColumn ||\n      props.formatTiles !== oldProps.formatTiles ||\n      props.type !== oldProps.type ||\n      JSON.stringify(props.columns) !== JSON.stringify(oldProps.columns) ||\n      JSON.stringify(props.credentials) !== JSON.stringify(oldProps.credentials);\n\n    if (shouldUpdateData) {\n      this.setState({data: null, apiVersion: null});\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this._updateData();\n    }\n  }\n\n  async _updateData(): Promise<void> {\n    try {\n      const {type, data: source, clientId, credentials, connection, ...rest} = this.props;\n      const localConfig = {...getDefaultCredentials(), ...credentials};\n      const {apiVersion} = localConfig;\n\n      let result: Partial<FetchLayerDataResult>;\n      if (apiVersion === API_VERSIONS.V1 || apiVersion === API_VERSIONS.V2) {\n        result = {\n          data: await getDataV2({type, source, credentials: credentials as ClassicCredentials})\n        };\n      } else {\n        result = await fetchLayerData({\n          type,\n          source,\n          clientId,\n          credentials: credentials as CloudNativeCredentials,\n          connection,\n          ...rest,\n          // CartoLayer only supports tiled output from v8.8, force data format\n          format: FORMATS.TILEJSON\n        });\n      }\n\n      this.setState({...result, apiVersion});\n\n      this.props.onDataLoad?.(result.data, {\n        propName: 'data',\n        layer: this\n      });\n    } catch (err) {\n      if (this.props.onDataError) {\n        this.props.onDataError(err as Error);\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  _getSubLayerAndProps(): [any, LayerProps] {\n    assert(this.state);\n\n    const {data, apiVersion} = this.state;\n\n    const {uniqueIdProperty} = defaultProps;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {data: _notUsed, ...propsNoData} = this.props;\n    // @ts-expect-error 'uniqueIdProperty' is specified more than once, so this usage will be overwritten.\n    const props = {uniqueIdProperty, ...propsNoData};\n\n    if (apiVersion === API_VERSIONS.V1 || apiVersion === API_VERSIONS.V2) {\n      return [MVTLayer, props];\n    }\n\n    /* global URL */\n    const tileUrl = new URL(data.tiles[0]);\n\n    props.formatTiles =\n      props.formatTiles ||\n      (tileUrl.searchParams.get('formatTiles') as TileFormat) ||\n      TILE_FORMATS.MVT;\n\n    if (data.scheme === 'h3') {\n      return [H3TileLayer, props];\n    }\n    if (data.scheme === 'quadbin') {\n      return [QuadbinTileLayer, props];\n    }\n    return props.formatTiles === TILE_FORMATS.MVT ? [MVTLayer, props] : [CartoTileLayer, props];\n  }\n\n  renderLayers(): Layer | null {\n    assert(this.state);\n\n    const {data} = this.state;\n\n    if (!data) return null;\n\n    const {updateTriggers} = this.props;\n\n    const [layer, props] = this._getSubLayerAndProps();\n\n    // eslint-disable-next-line new-cap\n    return new layer(\n      props,\n      this.getSubLayerProps({\n        id: `carto-${layer.layerName}`,\n        data,\n        updateTriggers\n      })\n    );\n  }\n}\n"],"file":"carto-layer.js"}